let speedslow = false;
let speedmedium = false;
let speedfast = false;
let animationspeed = -1;

var container = document.getElementById("array");

// Function to generate the array of blocks
function generatearray() {
    for (var i = 0; i < 20; i++) {

        // Return a value from 1 to 100 (both inclusive)
        var value = Math.ceil(Math.random() * 100);

        // Creating element div
        var array_ele = document.createElement("div");

        // Adding class 'block' to div
        array_ele.classList.add("block");

        // Adding style to div
        array_ele.style.height = `${value * 3}px`;
        array_ele.style.transform = `translate(${i * 30}px)`;

        // Creating label element for displaying
        // size of particular block
        var array_ele_label = document.createElement("label");
        array_ele_label.setAttribute("id", i);
        array_ele_label.classList.add("block_id");
        array_ele_label.innerText = value;

        // Appending created elements to index.html
        array_ele.appendChild(array_ele_label);
        container.appendChild(array_ele);
    }
}


async function MergeArray(idarr, start, mid, end) {
    //Basically we will run insertion sort algo for merging the arrays.
    for (let i = start; i <= end; i++) {
        container.childNodes[i].style.backgroundColor = 'red';
    }
    await new Promise((resolve) =>
        setTimeout(() => {
            resolve();
        }, animationspeed)
    );
    await Merge2Array(idarr, start, mid, end);
    await new Promise((resolve) =>
        setTimeout(() => {
            resolve();
        }, animationspeed)
    );
    for (let i = start; i <= end; i++) {
        container.childNodes[i].style.backgroundColor = 'green';
    }
}

async function Merge2Array(idarr, start, mid, end) {
    let orgarr = [];

    var blocks = document.querySelectorAll(".block");

    let i = start;
    let j = mid + 1;

    while (i <= mid && j <= end) {
        let var1 = parseInt(blocks[i].childNodes[0].innerHTML);
        let var2 = parseInt(blocks[j].childNodes[0].innerHTML);

        if (var1 > var2) {
            orgarr.push(var2);
            j++;
        } else {
            orgarr.push(var1);
            i++;
        }
    }

    //Now adding the remaining ones.
    while (i <= mid) {
        let var1 = parseInt(blocks[i].childNodes[0].innerHTML);
        orgarr.push(var1);
        i++;
    }

    while (j <= end) {
        let var2 = parseInt(blocks[j].childNodes[0].innerHTML);
        orgarr.push(var2);
        j++;
    }

    //Now we have to change the heights of the original array.
    for (let i = 0; i < orgarr.length; i++) {
        container.childNodes[`${idarr[i]}`].style.height = `${orgarr[i]*3}px`;
        document.getElementById(`${idarr[i]}`).innerText = `${orgarr[i]}`;
    }

}

async function MergeSort(start, end, delay = animationspeed) {
    if (start < end) {
        console.log(start, end);
        let mid = parseInt(start + (end - start) / 2);

        await MergeSort(start, mid);
        await MergeSort(mid + 1, end);
        await new Promise((resolve) =>
            setTimeout(() => {
                resolve();
            }, animationspeed)
        );

        let idarr = [];
        for (let i = start; i <= end; i++) {
            var x = document.getElementsByClassName("block_id")[i].id;
            idarr.push(x);
        }
        await MergeArray(idarr, start, mid, end);

        await new Promise((resolve) =>
            setTimeout(() => {
                resolve();
            }, animationspeed)
        );
    }
}

function generateNewArray() {
    // This function is used to generate a new array containing elements of random numbers having random values.

    // We have to empty the msg written in the stop div block.
    document.getElementById('stopMessage').innerText = "";

    let divblock = document.getElementById('array');
    divblock.innerText = "";

    generatearray();
}

async function startAnimation() {
    // This function is used for starting the animation of the array which is generated by the generate function.

    // We have to empty the msg written in the stop div block.
    document.getElementById('stopMessage').innerText = "";

    // First check if the speed of the animation is set if not then set it.
    if (animationspeed == -1)
        animationspeed = 250;

    // Now disable all the buttons leaving stop button if and only if array is generated in the div block.
    let got = true;
    if (document.getElementById('array').innerText != "") {
        document.getElementById('slowbtn').disabled = true;
        document.getElementById('mediumbtn').disabled = true;
        document.getElementById('fastbtn').disabled = true;
        document.getElementById('genbtn').disabled = true;
        document.getElementById('startbtn').disabled = true;

        await MergeSort(0, 19, animationspeed);

        document.getElementById('slowbtn').disabled = false;
        document.getElementById('mediumbtn').disabled = false;
        document.getElementById('fastbtn').disabled = false;
        document.getElementById('genbtn').disabled = false;
        document.getElementById('startbtn').disabled = false;

    }



}

function stopAnimation() {
    let msg = "";
    let divblock = document.getElementById('array');
    if (divblock.innerText != "") {
        document.getElementById('stopMessage').innerText = "Animation Stopped";
        document.getElementById('stopMessage').classList.add("stopMessageClass");
    }
    divblock.innerText = msg;

    document.getElementById('slowbtn').disabled = false;
    document.getElementById('mediumbtn').disabled = false;
    document.getElementById('fastbtn').disabled = false;
    document.getElementById('genbtn').disabled = false;
    document.getElementById('startbtn').disabled = false;


}

// Fast-0 Medium-250 Slow-500

function speedSlow() {
    speedslow = true;
    speedmedium = false;
    speedfast = false;

    animationspeed = 500;
}

function speedMedium() {
    speedslow = false;
    speedmedium = true;
    speedfast = false;

    animationspeed = 250;
}

function speedFast() {
    speedslow = false;
    speedmedium = false;
    speedfast = true;

    animationspeed = 0;
}