let speedslow = false;
let speedmedium = false;
let speedfast = false;
let animationspeed = -1;

var container = document.getElementById("array");

// Function to generate the array of blocks
function generatearray() {
    for (var i = 0; i < 20; i++) {

        // Return a value from 1 to 100 (both inclusive)
        var value = Math.ceil(Math.random() * 100);

        // Creating element div
        var array_ele = document.createElement("div");

        // Adding class 'block' to div
        array_ele.classList.add("block");

        // Adding style to div
        array_ele.style.height = `${value * 3}px`;
        array_ele.style.transform = `translate(${i * 30}px)`;

        // Creating label element for displaying
        // size of particular block
        var array_ele_label = document.createElement("label");
        array_ele_label.setAttribute("id", i);
        array_ele_label.classList.add("block_id");
        array_ele_label.innerText = value;

        // Appending created elements to index.html
        array_ele.appendChild(array_ele_label);
        container.appendChild(array_ele);
    }
}


async function Partition(low, high) {
    var blocks = document.querySelectorAll(".block");

    for (let i = low; i <= high; i++) {
        blocks[i].style.background = 'red';
    }

    await new Promise((resolve) =>
        setTimeout(() => {
            resolve();
        }, animationspeed)
    );

    let pivot = parseInt(blocks[high].childNodes[0].innerHTML);

    let i = low - 1;

    for (let j = low; j <= high - 1; j++) {
        if (parseInt(blocks[j].childNodes[0].innerHTML) < pivot) {
            i++;

            //Now swap the ith and jth block;
            var tempheight = blocks[j].style.height;
            var temptext = blocks[j].childNodes[0].innerText;

            blocks[j].style.height = blocks[i].style.height;
            blocks[i].style.height = tempheight;

            blocks[j].childNodes[0].innerText = blocks[i].childNodes[0].innerText;
            blocks[i].childNodes[0].innerText = temptext;
        }
    }

    //Now swaping (i+1)th and highth blocks
    //i = i + 1;
    //j=high
    var tempheight = blocks[high].style.height;
    var temptext = blocks[high].childNodes[0].innerText;

    blocks[high].style.height = blocks[i + 1].style.height;
    blocks[i + 1].style.height = tempheight;

    blocks[high].childNodes[0].innerText = blocks[i + 1].childNodes[0].innerText;
    blocks[i + 1].childNodes[0].innerText = temptext;

    await new Promise((resolve) =>
        setTimeout(() => {
            resolve();
        }, animationspeed)
    );

    for (let i = low; i <= high; i++) {
        blocks[i].style.background = '#6b5b95';
    }

    return i + 1;
}

async function QuickSort(low, high, delay = animationspeed) {
    var blocks = document.querySelectorAll(".block");

    if (low <= high) {
        let pi = await Partition(low, high, animationspeed);

        console.log(pi);
        blocks[pi].style.background = 'green';
        await new Promise((resolve) =>
            setTimeout(() => {
                resolve();
            }, animationspeed)
        );

        await QuickSort(low, pi - 1);
        await new Promise((resolve) =>
            setTimeout(() => {
                resolve();
            }, animationspeed)
        );
        await QuickSort(pi + 1, high);
    }

}

function generateNewArray() {
    // This function is used to generate a new array containing elements of random numbers having random values.

    // We have to empty the msg written in the stop div block.
    document.getElementById('stopMessage').innerText = "";

    let divblock = document.getElementById('array');
    divblock.innerText = "";

    generatearray();
}

async function startAnimation() {
    // This function is used for starting the animation of the array which is generated by the generate function.

    // We have to empty the msg written in the stop div block.
    document.getElementById('stopMessage').innerText = "";

    // First check if the speed of the animation is set if not then set it.
    if (animationspeed == -1)
        animationspeed = 250;

    // Now disable all the buttons leaving stop button if and only if array is generated in the div block.
    let got = true;
    if (document.getElementById('array').innerText != "") {
        document.getElementById('slowbtn').disabled = true;
        document.getElementById('mediumbtn').disabled = true;
        document.getElementById('fastbtn').disabled = true;
        document.getElementById('genbtn').disabled = true;
        document.getElementById('startbtn').disabled = true;

        // await MergeSort(0, 19, animationspeed);
        await QuickSort(0, 19, animationspeed);

        document.getElementById('slowbtn').disabled = false;
        document.getElementById('mediumbtn').disabled = false;
        document.getElementById('fastbtn').disabled = false;
        document.getElementById('genbtn').disabled = false;
        document.getElementById('startbtn').disabled = false;

    }



}

function stopAnimation() {
    let msg = "";
    let divblock = document.getElementById('array');
    if (divblock.innerText != "") {
        document.getElementById('stopMessage').innerText = "Animation Stopped";
        document.getElementById('stopMessage').classList.add("stopMessageClass");
    }
    divblock.innerText = msg;

    document.getElementById('slowbtn').disabled = false;
    document.getElementById('mediumbtn').disabled = false;
    document.getElementById('fastbtn').disabled = false;
    document.getElementById('genbtn').disabled = false;
    document.getElementById('startbtn').disabled = false;


}

// Fast-0 Medium-250 Slow-500

function speedSlow() {
    speedslow = true;
    speedmedium = false;
    speedfast = false;

    animationspeed = 500;
}

function speedMedium() {
    speedslow = false;
    speedmedium = true;
    speedfast = false;

    animationspeed = 250;
}

function speedFast() {
    speedslow = false;
    speedmedium = false;
    speedfast = true;

    animationspeed = 0;
}